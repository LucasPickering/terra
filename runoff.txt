1. Start at highest tile (by elev)
    1. Push ALL water to tiles with lower elevation (Push water into ocean when possible)
2. Water collects in basins where lakes should form
    1. For each lake basin, cluster tiles that should form a lake
    2. Split the water among each cluster

Problems
--------
Overly complex?
Could have a basin that is larger than that the runoff can fill - complicates clustering



1. Start at highest tile (by water elev)
    1. Equalize water between each tile and its lower neighbors (Push water into ocean when possible)
    2. Go to next tile in list (DON'T RE-SORT LIST AFTER EACH EQUALIZATION)
2. Repeat x times (alternative: repeat until no changes occur)

Problems
--------
Requires indefinite # of iterations
May create infinite loop?



1. Take highest tile (by water elev) - this is your source tile
    1. If tile has no water, go to next in list
    2. Equalize water across tile and ALL neighbors
    3. Go to neighbors, starting at lowest (by water elev) and push out from each one
    4. Repeat with DFS
2. Go to 1


Problems
--------
Indefinite amount of iterations
Might not be complete? Tile could get water pushed onto it after being marked complete
Doesn't properly equalize for lakes - only equalizes over a 1-radius area



=====NEW STRATEGY=====

GLOSSARY
traversal pattern - list of what percentage of one unit of water runs over each tile
distribution pattern - list of percentages of final water destination for each tile
sink - tile whose distribution pattern is 1.0 to ocean

1. Start at lowest tile
    1. Push water to all tiles <= its elevation - push out to ocean whenever possible
        1. Create distribution and traversal pattern each time
    2. Repeat for next lowest tile
2. Pick a basin
    1. Do things

Forceful runoff: push all water to lower elev tiles
    Runoff either dumps to ocean or collects in basin
    Tag a tile as a "sink" if all of its runoff reaches the ocean
        By default, assume all tiles are sinks
        For every tile, track how much water it has from every other tile
            Map of Tile:double, sum of map.values() = water level
        If you try to push out of a tile but there are none lower, mark all keys in the list as non-sink

For each tile, generate a list of:
    Percentage breakdown for final runoff destination - for sinks, will be 1.0 to ocean
    Traversal pattern, e.g. if tile1 has 1.0 water,
        0.9 goes over tile2
            0.9*tile2's traversal pattern
        0.1 goes over tile3
            0.1*tile3's traversal pattern
When simulating runoff for a tile
    Add water to sinks
    Add water traversed to each tile in the traversal pattern

Recursive strategy for tracking traversal and distribution patterns
    Start at lowest tile by elevation
    Determine its distribution+traversal patterns - should be either into ocean or none, unless there is an adjacent tile of equal elevation
    For each tile, create patterns based on adjacent lower tiles

Filling a basin:
    Create empty pool for tiles
    Pick center tile (any tile with water on it) - add to pool
    Look for adjacent basin sources (two tiles with same elevation could both collect water) - add to pool
        Each time you add a tile, calculate:
        Total water available
        Maximum water elevation: min(elev of tile for each tile adjacent to basin)
        Total water capacity: sum(max water elev - elev of tile for each tile in basin)
    If water available > capacity, add lowest (by elev) tile adjacent to basin
    If you add a sink to the basin,
